<!--  -->
<template>
  <view class='container search'>
    <view class="search-header">
      <van-search value="{{ value }}"
                  background="#fff"
                  placeholder="请输入搜索关键词"
                  use-action-slot
                  field-class="field-class"
                  @change="onChange"
                  @clear="onClear"
                  @search="onSearch">
        <view slot="action"
              class="search-btn"
              @tap="onSearch">搜索</view>
      </van-search>
    </view>
    <view class="search-list van-hairline--top">
      <scroll-view scroll-y
                   class="search-scroll"
                   scroll-with-animation
                   @scrolltolower="bindScrolltolower">
        <repeat for="{{materialList}}"
                key="index"
                index="index">
          <view class="search-item">
            <item :item.sync="item" />
          </view>

        </repeat>
      </scroll-view>
      <view class="search-empty"
            wx:if="{{!materialList.length}}">
        <noDataTemplate :info="noDataInfo"></noDataTemplate>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import api from '../../request/api'
import item from '../../components/item'
import noDataTemplate from '../../components/noDataTemplate';

export default class Search extends wepy.page {
  config = {
    navigationBarTitleText: "搜索",
    usingComponents: {
      "van-search": "../../vant/search/index"
    }
  };

  data = {
    value: '',
    noDataInfo: {
      tip: '抱歉，暂时没有找到你想要的内容~换个关键词试试吧！~',
      url: 'https://pub.file.k12.vip/empty/empty-search.png'
    },
    materialList: [],
    catalogId: 0,
    current: 1,
    size: 7,
    total: 0,
    isEnd: false
  };
  components = {
    item,
    noDataTemplate
  }

  methods = {
    onChange (event) {
      this.value = event.detail
    },
    onSearch (event) {
      this.getListMaterial()
    },
    onClear() {
      this.value = '',
      this.materialList = []
    },
    bindScrolltolower() {
      if(this.isEnd) {
        return
      }
      this.size = this.size + 10
      this.getListMaterial()
    }
  }

  getListMaterial () {
    let { current, size, catalogId,value } = this
    return api.material.listMaterial({
      catalogId,
      current,
      size,
      name:value
    }).then(({ data }) => {
      let arr = []
      this.total = data.resultData.total
      this.materialList = data.resultData.records
      if(data.resultData.total == data.resultData.records.length) {
        this.isEnd = true
      }
      this.$apply()
    })
  }

  onLoad (option) {
    this.catalogId = option.catalogId
  }


}
</script>
<style lang='scss'>
.search {
  &-header {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    padding-bottom: 10rpx;
  }
  &-scroll {
    height: calc(100vh - 102rpx);
  }
  &-list {
    position: relative;
    position: absolute;
    left: 0;
    right: 0;
    top: 102rpx;
    bottom: 0;
    overflow-y: auto;
    background: rgba(250, 250, 250, 1);
  }
  &-item {
    background-color: #fff;
    border-bottom: 2rpx solid #d8d8d8;
  }
  &-text {
    margin-top: 32rpx;
    margin-left: 32rpx;
    font-size: 24rpx;
    color: #afafaf;
  }
  &-empty {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
    z-index: 1000;
    background-color: #fafafa;
    &-img {
      width: 640rpx;
      height: 460rpx;
    }
    &-text {
      font-size: 26rpx;
      color: #858697;
      line-height: 36rpx;
    }
  }
}
.field-class {
  border-radius: 16px !important;
  border: 1px solid rgba(216, 216, 216, 1);
}
.search-btn {
  color: #ff772d;
}
</style>
