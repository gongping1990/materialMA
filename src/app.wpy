<style lang="scss">
@import './assets/style/mixin.scss';
@import './assets/style/index.scss';
@import './vant/common/index.wxss';
.container {
  position: absolute;
  left: 0;
  right: 0;
  top: 0;
  bottom: 0;
  overflow-y: auto;
  -webkit-overflow-scrolling: touch;
  box-sizing: border-box;
}

.home-classify {
  &-scroll {
    width: calc(100vw + 32px);
    display: flex;
    flex-wrap: nowrap;
    white-space: nowrap;
    padding: 32rpx 0;
  }
  &-item {
    display: inline-flex;
    align-items: center;
    height: 56rpx;
    margin-left: 32rpx;
    padding: 0 24rpx;
    font-size: 26rpx;
    background: #f1f1f1;
    color: #858697;
    border-radius: 16rpx;

    &:last-child {
      margin-right: 32rpx;
    }
    &.active {
      color: #fff;
      background: linear-gradient(
        225deg,
        rgba(255, 119, 45, 1) 0%,
        rgba(251, 150, 69, 1) 100%
      );
    }
  }
}

::-webkit-scrollbar {
  width: 0;
  height: 0;
  color: transparent;
}
</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'
import 'weapp-cookie'
import api from './request/api'
import { setStore } from 'wepy-redux'
import configStore from './store'

const mta = require('./mta_wechat_sdk/mta_analysis.js')

const store = configStore()
setStore(store)

export default class extends wepy.app {
  config = {
    pages: [
      'pages/index/index',
      'pages/make/make',
      'pages/ranking/ranking',
      'pages/user/user',
      'pages/authorize/authorize',
      'pages/details/details',
      'pages/search/search',
      'pages/selectClass/selectClass',
      'pages/task/task',
      'pages/convertible/convertible',
      'pages/collection/collection',
      'pages/friend/friend',
      'pages/publicPopup/publicPopup',
      'pages/profit/profit',
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: 'WeChat',
      navigationBarTextStyle: 'black',
    },
    usingComponents: {
      "poster": "../miniprogram_dist/poster/index",
      "van-popup": "../vant/popup/index",
      "van-icon": "./vant/icon/index",
      "van-button": "./vant/button/index",
      "van-tabbar": "./vant/tabbar/index",
      "van-tabbar-item": "./vant/tabbar-item/index"
    }
  }

  globalData = {
    userInfo: {},
    share: false,
    height: 0,
    shareInfo: {},
    shareId: 0,
    isPhoneX: false,
    showprice: true
  }

  constructor() {
    super()
    this.use('requestfix')
    this.use('promisify');
  }

  onLaunch (options) {
    mta.App.init({
      "appID": "500674439",
    })
    options.query.shareId && (this.globalData.shareId = options.query.shareId)
    // 判断是否由分享进入小程序
    if (options.scene == 1007 || options.scene == 1008) {
      this.globalData.share = true
    } else {
      this.globalData.share = false
    };

    wepy.login().then(res => {
      let params = {
        code: res.code
      }

      options.query.shareId && (params.shareId = options.query.shareId)
      api.user.wxUserLogin(params).then(({ data }) => {
        let { resultData } = data
        this.globalData.userInfo = resultData
        store.dispatch({ type: 'UPDATE_USERINFO', payload: resultData })
        console.log(resultData)
        if (resultData.needAuth) {
          let url = `/pages/authorize/authorize`
          wx.navigateTo({ url })
        } else {
          if (options.query.shareId) {
            this.getShareInfo(options.query.shareId)
          }
          this.getShareInfoDetails()
        }
      })
    })

    wepy.getSystemInfo().then((res) => {
      console.log(res.model.search('iPhone X') )
      if (res.model.search('iPhone X') != -1) {
        this.globalData.isPhoneX = true
      }
    })


    wx.request({
      url: 'https://huoke.prod.k12.vip/sch/common/showprice', //开发者服务器接口地址",
      method: 'GET',
      success: res => {
        this.globalData.showprice = res.data.resultData
      },
    });
  }

  getShareInfo (shareId) {
    api.task.getShareInfo({
      shareId
    }).then(({ data }) => {
      store.dispatch({ type: 'UPDATE_SHAREINFO', payload: data.resultData })
    })
  }

  getShareInfoDetails (id) {
    api.task.getShareInfoDetails().then(({ data }) => {
      store.dispatch({ type: 'UPDATE_SHARE_FRIEND_INFO', payload: data.resultData })
    })
  }

  getData (x) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (x % 2 === 0) {
          resolve(x)
        } else {
          reject(`${x}是不正确的输入`);
        }
      }, x * 1000)
    })
  }

  screenSize () {
    var that = this;
    wx.getSystemInfo({
      success: function (res) {
        var ww = res.windowWidth;
        var hh = res.windowHeight;
        that.globalData.ww = ww;
        that.globalData.hh = hh;
      }
    })
  }

  bezier (pots, amount) {
    var pot;
    var lines;
    var ret = [];
    var points;
    for (var i = 0; i <= amount; i++) {
      points = pots.slice(0);
      lines = [];
      while (pot = points.shift()) {
        if (points.length) {
          lines.push(pointLine([pot, points[0]], i / amount));
        } else if (lines.length > 1) {
          points = lines;
          lines = [];
        } else {
          break;
        }
      }
      ret.push(lines[0]);
    }
    function pointLine (points, rate) {
      var pointA, pointB, pointDistance, xDistance, yDistance, tan, radian, tmpPointDistance;
      var ret = [];
      pointA = points[0];//点击
      pointB = points[1];//中间
      xDistance = pointB.x - pointA.x;
      yDistance = pointB.y - pointA.y;
      pointDistance = Math.pow(Math.pow(xDistance, 2) + Math.pow(yDistance, 2), 1 / 2);
      tan = yDistance / xDistance;
      radian = Math.atan(tan);
      tmpPointDistance = pointDistance * rate;
      ret = {
        x: pointA.x + tmpPointDistance * Math.cos(radian),
        y: pointA.y + tmpPointDistance * Math.sin(radian)
      };
      return ret;
    }
    return {
      'bezier_points': ret
    };
  }
}
</script>
